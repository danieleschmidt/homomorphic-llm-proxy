# Production Docker Compose for Homomorphic LLM Proxy v4.0
# Multi-container setup with monitoring, security, and scalability

version: '3.8'

services:
  # Main application
  homomorphic-llm-proxy:
    build:
      context: ..
      dockerfile: Dockerfile.production
      args:
        RUST_VERSION: "1.75"
        FEATURES: "production,monitoring,security"
    image: homomorphic-llm-proxy:4.0-production
    container_name: fhe-proxy-app
    restart: unless-stopped
    ports:
      - "443:8443"
      - "80:8080"
    environment:
      - RUST_LOG=info
      - CONFIG_PATH=/app/config/config.toml
      - JAEGER_SERVICE_NAME=homomorphic-llm-proxy
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - PROMETHEUS_ENDPOINT=0.0.0.0:9090
    volumes:
      - ./config/production.toml:/app/config/config.toml:ro
      - ./certs:/app/certs:ro
      - ./translations:/app/translations:ro
      - fhe-cache:/app/cache
      - fhe-logs:/app/logs
    networks:
      - fhe-network
    depends_on:
      - redis
      - postgres
      - jaeger
      - prometheus
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: fhe-proxy-lb
    restart: unless-stopped
    ports:
      - "8443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - fhe-network
    depends_on:
      - homomorphic-llm-proxy

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: fhe-proxy-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - fhe-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # PostgreSQL for audit logs and metrics
  postgres:
    image: postgres:15-alpine
    container_name: fhe-proxy-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=fhe_proxy
      - POSTGRES_USER=fhe_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fhe-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: fhe-proxy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    networks:
      - fhe-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: fhe-proxy-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fhe-network
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: fhe-proxy-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
      - "6831:6831/udp"
      - "6832:6832/udp"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger-data:/badger
    networks:
      - fhe-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: fhe-proxy-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - fhe-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: fhe-proxy-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    networks:
      - fhe-network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: fhe-proxy-logstash
    restart: unless-stopped
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    networks:
      - fhe-network
    depends_on:
      - elasticsearch

  # Alertmanager for alerts
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: fhe-proxy-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    networks:
      - fhe-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: fhe-proxy-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - fhe-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: fhe-proxy-cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - fhe-network
    privileged: true
    devices:
      - /dev/kmsg

  # Backup service
  backup:
    image: alpine:3.18
    container_name: fhe-proxy-backup
    restart: "no"
    volumes:
      - postgres-data:/backup/postgres:ro
      - redis-data:/backup/redis:ro
      - fhe-logs:/backup/logs:ro
      - ./backup:/backup/output
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - fhe-network
    command: ["/bin/sh", "/backup.sh"]
    profiles: ["backup"]

networks:
  fhe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  fhe-cache:
    driver: local
  fhe-logs:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  jaeger-data:
    driver: local
  elasticsearch-data:
    driver: local
  alertmanager-data:
    driver: local

# Health check configuration
x-healthcheck: &healthcheck
  test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s