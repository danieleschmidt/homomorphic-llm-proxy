# Production Docker Compose configuration for FHE LLM Proxy
# This configuration is optimized for production workloads with high availability,
# security, monitoring, and performance considerations.

version: '3.8'

x-common-variables: &common-variables
  RUST_LOG: "info"
  RUST_BACKTRACE: "0"
  FHE_METRICS_ENABLED: "true"
  FHE_SECURITY_LEVEL: "128"
  FHE_POLY_MODULUS_DEGREE: "16384"

x-common-deploy: &common-deploy
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s
  update_config:
    parallelism: 1
    delay: 10s
    failure_action: rollback
    monitor: 30s
    max_failure_ratio: 0.3

services:
  # Main FHE Proxy Service
  fhe-proxy:
    image: terragonlabs/homomorphic-llm-proxy:${IMAGE_TAG:-latest}
    hostname: fhe-proxy-{{.Task.Slot}}
    environment:
      <<: *common-variables
      FHE_HOST: "0.0.0.0"
      FHE_PORT: "8080"
      FHE_WORKERS: "4"
      FHE_MAX_CONNECTIONS: "1000"
      
      # Database Configuration
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      DATABASE_MAX_CONNECTIONS: "50"
      DATABASE_TIMEOUT: "30"
      
      # Redis Configuration
      REDIS_URL: "redis://redis:6379"
      REDIS_MAX_CONNECTIONS: "100"
      REDIS_TIMEOUT: "5"
      
      # Security Configuration
      JWT_SECRET: "${JWT_SECRET}"
      MASTER_API_KEY: "${MASTER_API_KEY}"
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: "1000"
      
      # External API Keys
      OPENAI_API_KEY: "${OPENAI_API_KEY:-}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY:-}"
      
      # Performance Configuration
      FHE_CACHE_SIZE: "1GB"
      FHE_BATCH_SIZE: "10"
      FHE_THREAD_POOL_SIZE: "8"
      
      # Monitoring Configuration
      PROMETHEUS_METRICS_PORT: "9090"
      JAEGER_AGENT_HOST: "jaeger"
      JAEGER_AGENT_PORT: "6831"
      
      # Logging Configuration
      LOG_LEVEL: "info"
      LOG_FORMAT: "json"
      LOG_FILE: "/var/log/fhe-proxy/app.log"
      
    volumes:
      - ./config/production.toml:/app/config.toml:ro
      - ./ssl:/app/ssl:ro
      - fhe_keys:/app/keys
      - fhe_cache:/app/cache
      - fhe_logs:/var/log/fhe-proxy
      
    ports:
      - "8080:8080"
      - "9090:9090"
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      <<: *common-deploy
      replicas: 3
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role == worker
          - node.labels.gpu == true
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.fhe-proxy.rule=Host(`${DOMAIN_NAME}`)"
        - "traefik.http.routers.fhe-proxy.tls=true"
        - "traefik.http.routers.fhe-proxy.tls.certresolver=letsencrypt"
        - "traefik.http.services.fhe-proxy.loadbalancer.server.port=8080"
        - "traefik.http.services.fhe-proxy.loadbalancer.healthcheck.path=/health"
        
    secrets:
      - jwt_secret
      - master_api_key
      - openai_api_key
      - postgres_password
      
    networks:
      - fhe-network
      - monitoring
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    hostname: postgres-primary
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
      
    deploy:
      <<: *common-deploy
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      placement:
        constraints:
          - node.role == worker
          - node.labels.storage == ssd
          
    secrets:
      - postgres_password
      
    networks:
      - fhe-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    hostname: redis-primary
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
      --databases 16
      --save 900 1
      --save 300 10
      --save 60 10000
      
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
      
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
      
    deploy:
      <<: *common-deploy
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 2G
      placement:
        constraints:
          - node.role == worker
          
    networks:
      - fhe-network

  # Reverse Proxy with SSL Termination
  traefik:
    image: traefik:v3.0
    hostname: traefik
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--accesslog=true"
      - "--log.level=INFO"
      
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"  # Traefik dashboard
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
      - traefik_logs:/var/log/traefik
      
    deploy:
      <<: *common-deploy
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
        - "traefik.http.routers.traefik.tls=true"
        - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        
    networks:
      - fhe-network
      - monitoring

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    hostname: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
      
    ports:
      - "9091:9090"
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      
    deploy:
      <<: *common-deploy
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME}`)"
        - "traefik.http.routers.prometheus.tls=true"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        
    networks:
      - monitoring

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    hostname: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD}"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SERVER_ROOT_URL: "https://grafana.${DOMAIN_NAME}"
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      
    ports:
      - "3000:3000"
      
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
    deploy:
      <<: *common-deploy
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        
    networks:
      - monitoring
      
    depends_on:
      prometheus:
        condition: service_healthy

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    hostname: jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      JAEGER_DISABLED: "false"
      
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP agent
      
    volumes:
      - jaeger_data:/badger
      
    deploy:
      <<: *common-deploy
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.jaeger.rule=Host(`jaeger.${DOMAIN_NAME}`)"
        - "traefik.http.routers.jaeger.tls=true"
        - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
        
    networks:
      - monitoring

  # Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    hostname: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
      
    ports:
      - "3100:3100"
      
    deploy:
      <<: *common-deploy
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
          
    networks:
      - monitoring

  # Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    hostname: promtail-{{.Node.Hostname}}
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - fhe_logs:/var/log/fhe-proxy:ro
      
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
          
    networks:
      - monitoring
      
    depends_on:
      - loki

# Secrets Configuration
secrets:
  jwt_secret:
    external: true
    name: fhe_proxy_jwt_secret
  master_api_key:
    external: true
    name: fhe_proxy_master_api_key
  openai_api_key:
    external: true
    name: fhe_proxy_openai_api_key
  postgres_password:
    external: true
    name: fhe_proxy_postgres_password

# Volumes Configuration
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/grafana
  jaeger_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/jaeger
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/loki
  fhe_keys:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/fhe-keys
  fhe_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/fhe-cache
  fhe_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/fhe-logs
  traefik_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/traefik/certs
  traefik_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/traefik/logs

# Networks Configuration
networks:
  fhe-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.30.0.0/16
  monitoring:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.31.0.0/16