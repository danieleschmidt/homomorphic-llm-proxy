apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fhe-proxy-ingress
  namespace: fhe-proxy
  labels:
    app.kubernetes.io/name: fhe-proxy
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX ingress controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "1M"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'; font-src 'self'; object-src 'none'; media-src 'self'; frame-src 'none'";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    
    # Cache control for static content
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
      }
    
    # Cert-manager for TLS
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: http01
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.yourcompany.com
    - fhe.yourcompany.com
    secretName: fhe-proxy-tls
  rules:
  # Main API endpoint
  - host: api.yourcompany.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fhe-proxy-service
            port:
              number: 8080
  
  # FHE-specific endpoint
  - host: fhe.yourcompany.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fhe-proxy-service
            port:
              number: 8080

---
# Separate ingress for monitoring endpoints (with authentication)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fhe-proxy-monitoring-ingress
  namespace: fhe-proxy
  labels:
    app.kubernetes.io/name: fhe-proxy
    app.kubernetes.io/component: monitoring-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "FHE Proxy Monitoring"
    # Restrict access to monitoring networks
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - monitoring.yourcompany.com
    secretName: fhe-proxy-monitoring-tls
  rules:
  - host: monitoring.yourcompany.com
    http:
      paths:
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: fhe-proxy-service
            port:
              number: 9090